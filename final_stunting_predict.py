# -*- coding: utf-8 -*-
"""Final_Stunting_Predict for github.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1H_5oLZiwY6omllc947lAc9QrqlmjD3gC

**IMPORT lIBRARY**
"""

import pandas as pd
from sklearn.model_selection import train_test_split, StratifiedKFold
from sklearn.preprocessing import StandardScaler, LabelEncoder
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.callbacks import EarlyStopping
from sklearn.metrics import classification_report, roc_auc_score
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

"""**DATA** **PREPROCESSING** **& EDA**"""

# Load and preprocess data

file_path = r'/content/Data_Train_Stunt_Rev.csv'
data = pd.read_csv(file_path)

print(data.head())

print(data.info())

print(data.describe(include='all'))

missing_values = data.isnull().sum()
print(f"Missing values in each column:\n{missing_values}")

# Distribusi fitur numerik
numerical_features = ['umur', 'Berat Badan', 'Panjang Badan', 'Lingkar Kepala']
for feature in numerical_features:
    plt.figure(figsize=(8, 4))
    sns.histplot(data[feature], kde=True)
    plt.title(f'Distribution of {feature}')
    plt.show()

# Distribusi fitur kategori
categorical_features = ['Jenis Kelamin', 'Keterangan']
#categorical_features = ['kelamin', 'label']
for feature in categorical_features:
    plt.figure(figsize=(8, 4))
    sns.countplot(x=data[feature])
    plt.title(f'Count plot of {feature}')
    plt.show()

"""**CLEANING DATASET**"""

data.rename(columns={'Keterangan': 'Label'}, inplace=True)

data.rename(columns={'umur': 'Umur'}, inplace=True)

data = data.dropna()

random_data = data.sample(n=5)
print(random_data)

print(data.describe(include='all'))

label_encoder = LabelEncoder()
data['Jenis Kelamin'] = label_encoder.fit_transform(data['Jenis Kelamin'])
data['Label'] = label_encoder.fit_transform(data['Label'])

X = data[['Umur', 'Jenis Kelamin', 'Berat Badan', 'Panjang Badan', 'Lingkar Kepala']]
y = data['Label']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

"""MODELLING STUNTING PREDICT"""

model = Sequential([
    Dense(64, activation='relu', input_shape=(X_train.shape[1],)),
    Dense(32, activation='relu'),
    Dense(1, activation='sigmoid')
])

optimizer = tf.keras.optimizers.Adam(learning_rate=0.001)
model.compile(optimizer=optimizer, loss='binary_crossentropy', metrics=['accuracy'])

early_stopping = EarlyStopping(monitor='val_loss', patience=100  )

model.fit(X_train_scaled, y_train, epochs=1000, batch_size=32, validation_split=0.2, callbacks=[early_stopping])

# Save the final model
model.save('stunting.h5')

# Evaluate the final model
test_loss, test_accuracy = model.evaluate(X_test_scaled, y_test)
print(f"Test Accuracy: {test_accuracy}")

y_pred = model.predict(X_test_scaled)
y_pred_binary = (y_pred > 0.5).astype(int)

print("Classification Report:")
print(classification_report(y_test, y_pred_binary))

print("AUC-ROC Score:", roc_auc_score(y_test, y_pred))

"""LOAD MODEL"""

from tensorflow.keras.models import load_model

# Load model
model_path = 'stunting.h5'
model = load_model(model_path)

# Misalkan data baru yang ingin diprediksi
new_data = pd.DataFrame({
    'Umur': [28, 36, 14, 5, 20, 2, 3, 2],
    'Jenis Kelamin': ['0', '1', '0', '1', '0', '0', '1', '0'],
    'Berat Badan': [11, 10, 8, 7, 9, 6, 8, 5],
    'Panjang Badan': [83, 88, 70, 62, 76, 55, 64, 60],
    'Lingkar Kepala': [36, 36, 34, 33, 34, 34, 35, 33]
})

# Preprocess new data
label_encoder = LabelEncoder()
label_encoder.fit(data['Jenis Kelamin'])
new_data['Jenis Kelamin'] = label_encoder.fit_transform(new_data['Jenis Kelamin'])

# Define features
X_new = new_data[['Umur', 'Jenis Kelamin', 'Berat Badan', 'Panjang Badan', 'Lingkar Kepala']]

# Scale features
scaler = StandardScaler()
scaler.fit(X)
X_new_scaled = scaler.fit_transform(X_new)

# Predict using the model
y_pred_new = model.predict(X_new_scaled)
y_pred_new_binary = (y_pred_new > 0.5).astype(int)

# Print prediction results
print("Predictions (0: Tidak Stunting, 1: Stunting):")
print(y_pred_new_binary)

# Convert the model to TensorFlow.js format
!pip install tensorflowjs
#!tensorflowjs_converter --input_format keras stunting.h5 tfjs.model
!tensorflowjs_converter --input_format=keras stunting.h5 tfjs.stunting